Cript++ tänker vi är ett imperativt språk inspirerat av Javascript med fokus på statisk typning ala C++.
Alltså en mjuk statisk typning där super tar in vad som helst utan att bråka.
Språket bör innehålla tilldelning, villkor och repetitionssatser samt funktioner. Språket bör vara lexikaliskt
scope med viss inspiration av C++s minneshantering. 
Det bör vara nyckelordsstyrt. Repetitioner ska kunna avbrytas med break, 
och funktioner med en return-sats.

Variabeltyper:
    Classer
        Arketyp klasser är Int Float, Char

    Int
        Integers alla tal mellan -2 miljoner och 2 miljoner

    Float
        Decimal tal

    Char 
        En specifik char. En sträng är en lista av dessa
        Char sparas som en int baserat på UTF-8 tabellen
        Char kan därför muteras och 'a' + 'a' = 'b' 
        Char skrivs med "" eller '' 

    Super
        Super antar typen för det angivna elementet. Sedan ses variabeln som den nya typen.



Containers:  
    Tuple där du själv definierar typningen av paret
    Array numrerade och/eller associativa ej hashes och lists bara arrayer!
    String är en array av Chars => String a = 'hej' a[1] = 'e' str(1) => 'a'

Funktioner:
    rekursiva
    Överlagring?
    

Inbyggda moduler? 
    Ska allt finnas från början eller ska man kunna importera moduler/libraries?

foo(int a){
    int x = 1;
    print(x);
    return x + a;
}

int x = foo(rand(0,9));

if(x >= 5){
    print("wow nice");
} else {
    print("go die");
}

**** global variabel? ****
global float glob = 0.0
**** global ****
global glob = 1.0

**** Kanske? ****
Array a = [[1,2,3], [1,2,3], [1,2,3]]

forfor(int i,j = 0,0; i < len(a), j < len(a[j]); i,j++){
    print(a[j]);
}
**** Kanske? ****

eller rekursiv foor som går igenom alla element?

}

:PROGRAM{
   :STMTLIST


}
:STMTLIST{
    :STMT, :STMTLIST
    :STMT
}

:STMT{
    :ASSIGN
    :EXPR
}
:ASSIGN{
    :VARIABLE_TYPE, :VARIABLE, :EXPR
}
:VARIABLE_TYPE{
    match(/[a-zA-Z0-9]/)
}
:EXPR{
    :TERM
}
:TERM{
    :INT
    :CHAR
    :BOOL
    :CLASS
    :SUPER
    :VARIABLE
}
:INT{
    match(Integer)
}
:CHAR{
    match(Char)
}
:BOOL{
    match("true"){true}
    match("false"){false}
}
:CLASS{
    ???
}
:SUPER{
    :INT
    :CHAR
    :BOOL
    :CLASS
}
:VARIABLE{
}
:STMT{
    :FUNCTION
    :STD_FUNCTION
}
